// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: file.proto

package file

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for File service

type FileService interface {
	// 定义一个客户端流式调用
	File(ctx context.Context, opts ...client.CallOption) (File_FileService, error)
	DealFile(ctx context.Context, in *DealFileRequest, opts ...client.CallOption) (*DealFileRespond, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "file"
	}
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) File(ctx context.Context, opts ...client.CallOption) (File_FileService, error) {
	req := c.c.NewRequest(c.name, "File.File", &FileByte{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &fileServiceFile{stream}, nil
}

type File_FileService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*FileByte) error
}

type fileServiceFile struct {
	stream client.Stream
}

func (x *fileServiceFile) Close() error {
	return x.stream.Close()
}

func (x *fileServiceFile) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileServiceFile) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileServiceFile) Send(m *FileByte) error {
	return x.stream.Send(m)
}

func (c *fileService) DealFile(ctx context.Context, in *DealFileRequest, opts ...client.CallOption) (*DealFileRespond, error) {
	req := c.c.NewRequest(c.name, "File.DealFile", in)
	out := new(DealFileRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for File service

type FileHandler interface {
	// 定义一个客户端流式调用
	File(context.Context, File_FileStream) error
	DealFile(context.Context, *DealFileRequest, *DealFileRespond) error
}

func RegisterFileHandler(s server.Server, hdlr FileHandler, opts ...server.HandlerOption) error {
	type file interface {
		File(ctx context.Context, stream server.Stream) error
		DealFile(ctx context.Context, in *DealFileRequest, out *DealFileRespond) error
	}
	type File struct {
		file
	}
	h := &fileHandler{hdlr}
	return s.Handle(s.NewHandler(&File{h}, opts...))
}

type fileHandler struct {
	FileHandler
}

func (h *fileHandler) File(ctx context.Context, stream server.Stream) error {
	return h.FileHandler.File(ctx, &fileFileStream{stream})
}

type File_FileStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*FileByte, error)
}

type fileFileStream struct {
	stream server.Stream
}

func (x *fileFileStream) Close() error {
	return x.stream.Close()
}

func (x *fileFileStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileFileStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileFileStream) Recv() (*FileByte, error) {
	m := new(FileByte)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *fileHandler) DealFile(ctx context.Context, in *DealFileRequest, out *DealFileRespond) error {
	return h.FileHandler.DealFile(ctx, in, out)
}
